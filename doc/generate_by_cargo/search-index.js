var searchIndex = JSON.parse('{\
"phf":{"doc":"Compile-time generated maps and sets.","t":[3,3,3,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,10,11,0,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Map","OrderedMap","OrderedSet","PhfHash","Set","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","from","from","from","from","index","index","into","into","into","into","map","ordered_map","ordered_set","phf_hash","phf_hash_slice","set","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Entries","Keys","Map","Values","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","contains_key","entries","from","from","from","get","get_entry","get_key","into","into","into","into_iter","into_iter","into_iter","is_empty","keys","len","next","next","next","next_back","next_back","next_back","size_hint","size_hint","size_hint","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","values","Entries","Keys","OrderedMap","Values","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","contains_key","entries","from","from","from","get","get_entry","get_index","get_key","index","into","into","into","into_iter","into_iter","into_iter","is_empty","keys","len","next","next","next","next_back","next_back","next_back","size_hint","size_hint","size_hint","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","values","Iter","OrderedSet","borrow","borrow_mut","contains","from","get_index","get_key","index","into","into_iter","is_disjoint","is_empty","is_subset","is_superset","iter","len","next","next_back","size_hint","try_from","try_into","type_id","Iter","Set","borrow","borrow_mut","contains","from","get_key","into","into_iter","is_disjoint","is_empty","is_subset","is_superset","iter","len","next","next_back","size_hint","try_from","try_into","type_id"],"q":["phf","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","phf::map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","phf::ordered_map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","phf::ordered_set","","","","","","","","","","","","","","","","","","","","","","","phf::set","","","","","","","","","","","","","","","","","","","",""],"d":["An immutable map constructed at compile time.","An order-preserving immutable map constructed at compile …","An order-preserving immutable set constructed at compile …","A trait implemented by types which can be used in PHF data …","An immutable set constructed at compile time.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","An immutable map constructed at compile time.","An order-preserving immutable map constructed at compile …","An order-preserving immutable set constructed at compile …","Feeds the value into the state given, updating the hasher …","Feeds a slice of this type into the state provided.","An immutable set constructed at compile time.","","","","","","","","","","","","","An iterator over the key/value pairs in a <code>Map</code>.","An iterator over the keys in a <code>Map</code>.","An immutable map constructed at compile time.","An iterator over the values in a <code>Map</code>.","","","","","","","Determines if <code>key</code> is in the <code>Map</code>.","Returns an iterator over the key/value pairs in the map.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a reference to the value that <code>key</code> maps to.","Like <code>get</code>, but returns both the key and the value.","Returns a reference to the map’s internal static …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns true if the <code>Map</code> is empty.","Returns an iterator over the keys in the map.","Returns the number of entries in the <code>Map</code>.","","","","","","","","","","","","","","","","","","","Returns an iterator over the values in the map.","An iterator over the entries in a <code>OrderedMap</code>.","An iterator over the keys in a <code>OrderedMap</code>.","An order-preserving immutable map constructed at compile …","An iterator over the values in a <code>OrderedMap</code>.","","","","","","","Determines if <code>key</code> is in the <code>Map</code>.","Returns an iterator over the key/value pairs in the map.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a reference to the value that <code>key</code> maps to.","Like <code>get</code>, but returns both the key and the value.","Returns the index of the key within the list used to …","Returns a reference to the map’s internal static …","Returns references to both the key and values at an index …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns true if the <code>Map</code> is empty.","Returns an iterator over the keys in the map.","Returns the number of entries in the <code>Map</code>.","","","","","","","","","","","","","","","","","","","Returns an iterator over the values in the map.","An iterator over the values in a <code>OrderedSet</code>.","An order-preserving immutable set constructed at compile …","","","Returns true if <code>value</code> is in the <code>Set</code>.","Returns the argument unchanged.","Returns the index of the key within the list used to …","Returns a reference to the set’s internal static …","Returns a reference to the key at an index within the list …","Calls <code>U::from(self)</code>.","","Returns true if <code>other</code> shares no elements with <code>self</code>.","Returns true if the <code>OrderedSet</code> contains no elements.","Returns true if <code>other</code> contains all values in <code>self</code>.","Returns true if <code>self</code> contains all values in <code>other</code>.","Returns an iterator over the values in the set.","Returns the number of elements in the <code>OrderedSet</code>.","","","","","","","An iterator over the values in a <code>Set</code>.","An immutable set constructed at compile time.","","","Returns true if <code>value</code> is in the <code>Set</code>.","Returns the argument unchanged.","Returns a reference to the set’s internal static …","Calls <code>U::from(self)</code>.","","Returns true if <code>other</code> shares no elements with <code>self</code>.","Returns true if the <code>Set</code> contains no elements.","Returns true if <code>other</code> contains all values in <code>self</code>.","Returns true if <code>self</code> contains all values in <code>other</code>.","Returns an iterator over the values in the set.","Returns the number of elements in the <code>Set</code>.","","","","","",""],"i":[0,0,0,0,0,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,3,1,2,3,4,0,0,0,5,5,0,1,2,3,4,1,2,3,4,1,2,3,4,0,0,0,0,6,7,8,6,7,8,1,1,6,7,8,1,1,1,6,7,8,6,7,8,1,1,1,6,7,8,6,7,8,6,7,8,6,7,8,6,7,8,6,7,8,1,0,0,0,0,9,10,11,9,10,11,3,3,9,10,11,3,3,3,3,3,9,10,11,9,10,11,3,3,3,9,10,11,9,10,11,9,10,11,9,10,11,9,10,11,9,10,11,3,0,0,12,12,4,12,4,4,4,12,12,4,4,4,4,4,4,12,12,12,12,12,12,0,0,13,13,2,13,2,13,13,2,2,2,2,2,2,13,13,13,13,13,13],"f":[null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["",0],["",0]],["",0]],[[["",0],["",0]],["",0]],[[]],[[]],[[]],[[]],null,null,null,[[["",0],["",0]]],[[["",0]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["",0]],["bool",0]],[[["",0]],["entries",3]],[[]],[[]],[[]],[[["",0],["",0]],["option",4]],[[["",0],["",0]],["option",4]],[[["",0],["",0]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["keys",3]],[[["",0]],["usize",0]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["values",3]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["",0]],["bool",0]],[[["",0]],["entries",3]],[[]],[[]],[[]],[[["",0],["",0]],["option",4]],[[["",0],["",0]],["option",4]],[[["",0],["",0]],["option",4,[["usize",0]]]],[[["",0],["",0]],["option",4]],[[["",0],["usize",0]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["keys",3]],[[["",0]],["usize",0]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["values",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["",0]],["bool",0]],[[]],[[["",0],["",0]],["option",4,[["usize",0]]]],[[["",0],["",0]],["option",4]],[[["",0],["usize",0]],["option",4]],[[]],[[]],[[["",0],["orderedset",3]],["bool",0]],[[["",0]],["bool",0]],[[["",0],["orderedset",3]],["bool",0]],[[["",0],["orderedset",3]],["bool",0]],[[["",0]],["iter",3]],[[["",0]],["usize",0]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["",0]],["bool",0]],[[]],[[["",0],["",0]],["option",4]],[[]],[[]],[[["",0],["set",3]],["bool",0]],[[["",0]],["bool",0]],[[["",0],["set",3]],["bool",0]],[[["",0],["set",3]],["bool",0]],[[["",0]],["iter",3]],[[["",0]],["usize",0]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[3,"Map"],[3,"Set"],[3,"OrderedMap"],[3,"OrderedSet"],[8,"PhfHash"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"Iter"],[3,"Iter"]]},\
"phf_shared":{"doc":"","t":[8,5,5,5,10,11,5],"n":["PhfHash","displace","get_index","hash","phf_hash","phf_hash_slice","split"],"q":["phf_shared","","","","","",""],"d":["A trait implemented by types which can be used in PHF data …","","Return an index into <code>phf_generator::HashState::map</code>.","<code>key</code> is from <code>phf_generator::HashState::key</code>.","Feeds the value into the state given, updating the hasher …","Feeds a slice of this type into the state provided.",""],"i":[0,0,0,0,1,1,0],"f":[null,[[["u32",0],["u32",0],["u32",0],["u32",0]],["u32",0]],[[["u64",0],["usize",0]],["u32",0]],[[["",0],["u64",0]],["u64",0]],[[["",0],["",0]]],[[["",0]]],[[["u64",0]]]],"p":[[8,"PhfHash"]]},\
"robot_dsl":{"doc":"","t":[0,0,0,0,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,13,13,11,11,11,5,11,11,11,11,11,5,11,11,11,11,12,12,12,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,3,11,11,11,11,11,11,11,12,11,11,11,3,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,4,13,13,13,13,13,13,4,13,13,13,13,13,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,8,10,10,10,10,10,10,8,10,10,10,10,10,10,10,10,10,10,10,13,13,13,13,13,13,13,13,13,13,13,7,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12],"n":["env","error","function","interpreter","object","parser","scanner","syntax","token","Environment","assign","borrow","borrow_mut","define","fmt","from","from","get","into","new","to_string","try_from","try_into","type_id","Error","Io","Parse","Runtime","borrow","borrow_mut","description","error","fmt","fmt","from","from","into","parser_error","to_string","try_from","try_into","type_id","0","message","token","Function","Native","User","arity","borrow","borrow_mut","call","clone","clone_into","fmt","fmt","from","into","to_owned","to_string","try_from","try_into","type_id","arity","body","body","closure","name","params","Interpreter","borrow","borrow_mut","execute_block","from","globals","interpret","interpret_cal","into","new","try_from","try_into","type_id","visit_assign_expr","visit_binary_expr","visit_block_stmt","visit_branch_stmt","visit_call_expr","visit_exit_stmt","visit_expression_stmt","visit_function_stmt","visit_input_stmt","visit_inputn_stmt","visit_listen_stmt","visit_literal_expr","visit_loop_stmt","visit_speak_stmt","visit_unary_expr","visit_var_stmt","visit_variable_expr","Boolean","Callable","Null","Number","Object","String","borrow","borrow_mut","clone","clone_into","equals","fmt","from","into","to_owned","try_from","try_into","type_id","0","0","0","0","Parser","borrow","borrow_mut","calculate","from","into","new","parse","tokens","try_from","try_into","type_id","Scanner","borrow","borrow_mut","from","into","new","scan_tokens","try_from","try_into","type_id","Assign","Binary","Block","Boolean","Branch","Call","Exit","Expr","Expression","Function","Input","Inputn","Listen","Literal","LiteralValue","Loop","Null","Null","Number","Speak","Stmt","String","Unary","Var","Variable","accept","accept","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","expr","fmt","fmt","fmt","fmt","from","from","from","into","into","into","stmt","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","arguments","callee","left","name","name","operator","operator","paren","right","right","value","value","0","0","0","body","body","condition","expression","expression","initializer","input","input","name","name","params","statements","then","time","Visitor","visit_assign_expr","visit_binary_expr","visit_call_expr","visit_literal_expr","visit_unary_expr","visit_variable_expr","Visitor","visit_block_stmt","visit_branch_stmt","visit_exit_stmt","visit_expression_stmt","visit_function_stmt","visit_input_stmt","visit_inputn_stmt","visit_listen_stmt","visit_loop_stmt","visit_speak_stmt","visit_var_stmt","Bang","BangEqual","Branch","EOF","Equal","EqualEqual","Exit","False","Identifier","Input","Inputn","KEYWORDS","LeftBrace","LeftParen","Listen","Loop","Minus","Nil","Number","Plus","RightBrace","RightParen","SemiColon","Speak","Step","String","Token","TokenType","True","Var","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","fmt","from","from","into","into","lexeme","line","ne","ne","new","to_owned","to_owned","to_string","tpe","try_from","try_from","try_into","try_into","type_id","type_id","literal","literal"],"q":["robot_dsl","","","","","","","","","robot_dsl::env","","","","","","","","","","","","","","","robot_dsl::error","","","","","","","","","","","","","","","","","","robot_dsl::error::Error","","","robot_dsl::function","","","","","","","","","","","","","","","","","","robot_dsl::function::Function","","","","","","robot_dsl::interpreter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","robot_dsl::object","","","","","","","","","","","","","","","","","","robot_dsl::object::Object","","","","robot_dsl::parser","","","","","","","","","","","","robot_dsl::scanner","","","","","","","","","","robot_dsl::syntax","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","robot_dsl::syntax::Expr","","","","","","","","","","","","robot_dsl::syntax::LiteralValue","","","robot_dsl::syntax::Stmt","","","","","","","","","","","","","","robot_dsl::syntax::expr","","","","","","","robot_dsl::syntax::stmt","","","","","","","","","","","","robot_dsl::token","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","robot_dsl::token::TokenType",""],"d":["定义 dsl 运行的环境","定义 dsl 所输出的错误","定义 dsl 的函数调用方式","定义 dsl 的解释器","定义 dsl 变量的对象类型","对 dsl 进行解析","扫入源代码，进行词法分析，处理 token","定义 dsl 的语法树","定义 token …","environment 类型，对 dsl 语言中的环境进行抽象","改变变量的值","","","在当前环境中定义一个变量","","得到该环境的父环境","Returns the argument unchanged.","在当前环境中得到该变量的相关信息","Calls <code>U::from(self)</code>.","创建一个新的环境","","","","","错误的枚举类型","输入输出错误","语法错误","运行时错误","","","","输出报错信息","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","检测报错位置","","","","","","","","函数枚举类型","原生函数","用户调用函数","元数检查","","","调用语句","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","函数名","函数体","函数体","函数环境","函数名","函数参数","定义解释器的类型","","","执行语句块","Returns the argument unchanged.","全局环境","解释语句","…","Calls <code>U::from(self)</code>.","创建 Interpreter 对象","","","","","","","","","","","","","","","","","","","","","布尔值","函数","空值","数字","定义 dsl 对象的枚举类型","字符串","","","","","判断两个对象是否相等","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","定义 dsl 的解析器","","","解析 dsl 语句并计算出表达式的值， …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","创建一个解析器","解析 dsl 语句","","","","","scanner …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","创建 Scanner 对象","扫描完<strong>整个</strong>源代码","","","","赋值表达式","二元表达式","块语句","","分支语句","函数调用表达式","退出语句","…","表达式语句","函数声明语句","输入字符串语句","输入数字语句","停止语句","字面量","…","循环语句， 无限循环","","空语句","","打印语句","语法树中语句的枚举类型","","一元表达式","变量声明语句","变量","","","","","","","","","","","","","","","表达式模块的访问者接口","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","语句模块的访问者接口","","","","","","","","","","","","","","","参数列表","表达式的值","左操作数","赋值的变量","变量名","运算符","运算符","函数名","右操作数","操作数","赋值的值","字面量的值","","","","循环语句中的执行语句","函数声明语句中的函数体","分支语句中的条件表达式","表达式语句中的表达式","打印语句中的表达式","变量声明语句中的变量值","输入字符串语句中的变量名","输入数字语句中的变量名","函数声明语句中的函数名","变量声明语句中的变量名","函数声明语句中的参数列表","块语句中的语句列表","分支语句中的执行语句","停止时间表达式","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Token 类型，对词素进行打包","对词素类型的枚举定义","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","词素，储存具体词素内容","该词素所在行，方便定位错误位置","","","生成一个新的 Token","","","","Token 字段类型","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,2,2,2,2,2,0,2,2,2,2,2,0,2,2,2,2,3,4,4,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,7,7,7,7,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,0,9,9,9,9,9,9,9,9,9,9,9,9,9,10,11,12,13,0,14,14,14,14,14,14,14,14,14,14,14,0,15,15,15,15,15,15,15,15,15,16,16,17,18,17,16,17,0,17,17,17,17,17,16,0,17,18,17,18,17,0,18,16,17,16,16,17,16,18,17,16,18,17,16,18,17,16,18,17,0,16,16,18,18,16,18,17,16,18,17,0,16,18,17,16,18,16,18,17,16,18,17,16,18,17,19,19,20,21,22,20,23,19,20,23,21,24,25,26,27,28,29,30,31,32,33,34,35,29,33,29,36,30,37,0,38,38,38,38,38,38,0,39,39,39,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,40,40,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,0,40,40,40,41,40,41,40,41,40,41,40,41,40,41,41,40,41,40,41,41,41,40,41,41,40,41,41,41,40,41,40,41,40,41,42,43],"f":[null,null,null,null,null,null,null,null,null,null,[[["",0],["token",3],["object",4]],["result",4,[["error",4]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["string",3],["object",4]]],[[["",0],["formatter",3]],["result",6]],[[["rc",3]]],[[]],[[["",0],["token",3]],["result",4,[["object",4],["error",4]]]],[[]],[[]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["str",0]],[[["i32",0],["str",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["error",3]]],[[]],[[["token",3],["str",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,[[["",0]],["usize",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["interpreter",3],["vec",3]],["result",4,[["object",4],["error",4]]]],[[["",0]],["function",4]],[[["",0],["",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["vec",3],["rc",3,[["refcell",3,[["environment",3]]]]]],["result",4,[["error",4]]]],[[]],null,[[["",0],["vec",3]],["result",4,[["error",4]]]],[[["",0],["expr",4]],["result",4,[["string",3],["error",4]]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["token",3],["expr",4]],["result",4,[["object",4],["error",4]]]],[[["",0],["expr",4],["token",3],["expr",4]],["result",4,[["object",4],["error",4]]]],[[["",0],["vec",3]],["result",4,[["error",4]]]],[[["",0],["expr",4],["stmt",4]],["result",4,[["error",4]]]],[[["",0],["expr",4],["token",3],["vec",3]],["result",4,[["object",4],["error",4]]]],[[["",0]],["result",4,[["error",4]]]],[[["",0],["expr",4]],["result",4,[["error",4]]]],[[["",0],["token",3],["vec",3],["vec",3]],["result",4,[["error",4]]]],[[["",0],["token",3]],["result",4,[["error",4]]]],[[["",0],["token",3]],["result",4,[["error",4]]]],[[["",0],["expr",4]],["result",4,[["error",4]]]],[[["",0],["literalvalue",4]],["result",4,[["object",4],["error",4]]]],[[["",0],["stmt",4]],["result",4,[["error",4]]]],[[["",0],["expr",4]],["result",4,[["error",4]]]],[[["",0],["token",3],["expr",4]],["result",4,[["object",4],["error",4]]]],[[["",0],["token",3],["option",4]],["result",4,[["error",4]]]],[[["",0],["token",3]],["result",4,[["object",4],["error",4]]]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["object",4]],[[["",0],["",0]]],[[["",0],["object",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["option",4,[["expr",4]]]],[[]],[[]],[[["vec",3]]],[[["",0]],["result",4,[["vec",3,[["stmt",4]]],["error",4]]]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[["string",3]]],[[["",0]],["vec",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["visitor",8]],["result",4,[["error",4]]]],[[["",0],["visitor",8]],["result",4,[["error",4]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["expr",4]],[[["",0]],["literalvalue",4]],[[["",0]],["stmt",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["token",3],["expr",4]],["result",4,[["error",4]]]],[[["",0],["expr",4],["token",3],["expr",4]],["result",4,[["error",4]]]],[[["",0],["expr",4],["token",3],["vec",3]],["result",4,[["error",4]]]],[[["",0],["literalvalue",4]],["result",4,[["error",4]]]],[[["",0],["token",3],["expr",4]],["result",4,[["error",4]]]],[[["",0],["token",3]],["result",4,[["error",4]]]],null,[[["",0],["vec",3]],["result",4,[["error",4]]]],[[["",0],["expr",4],["stmt",4]],["result",4,[["error",4]]]],[[["",0]],["result",4,[["error",4]]]],[[["",0],["expr",4]],["result",4,[["error",4]]]],[[["",0],["token",3],["vec",3],["vec",3]],["result",4,[["error",4]]]],[[["",0],["token",3]],["result",4,[["error",4]]]],[[["",0],["token",3]],["result",4,[["error",4]]]],[[["",0],["expr",4]],["result",4,[["error",4]]]],[[["",0],["stmt",4]],["result",4,[["error",4]]]],[[["",0],["expr",4]],["result",4,[["error",4]]]],[[["",0],["token",3],["option",4]],["result",4,[["error",4]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["tokentype",4]],[[["",0]],["token",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["tokentype",4]],["bool",0]],[[["",0],["token",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,null,[[["",0],["tokentype",4]],["bool",0]],[[["",0],["token",3]],["bool",0]],[[["tokentype",4],["str",0],["i32",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null],"p":[[3,"Environment"],[4,"Error"],[13,"Io"],[13,"Runtime"],[4,"Function"],[13,"Native"],[13,"User"],[3,"Interpreter"],[4,"Object"],[13,"Boolean"],[13,"Callable"],[13,"Number"],[13,"String"],[3,"Parser"],[3,"Scanner"],[4,"Expr"],[4,"Stmt"],[4,"LiteralValue"],[13,"Call"],[13,"Binary"],[13,"Assign"],[13,"Variable"],[13,"Unary"],[13,"Literal"],[13,"Boolean"],[13,"Number"],[13,"String"],[13,"Loop"],[13,"Function"],[13,"Branch"],[13,"Expression"],[13,"Speak"],[13,"Var"],[13,"Input"],[13,"Inputn"],[13,"Block"],[13,"Listen"],[8,"Visitor"],[8,"Visitor"],[4,"TokenType"],[3,"Token"],[13,"String"],[13,"Number"]]},\
"siphasher":{"doc":"","t":[0,0,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,8,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["sip","sip128","SipHasher","SipHasher13","SipHasher24","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","default","default","default","finish","finish","finish","fmt","fmt","fmt","from","from","from","into","into","into","keys","keys","keys","new","new","new","new_with_keys","new_with_keys","new_with_keys","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write","write","Hash128","Hasher128","SipHasher","SipHasher13","SipHasher24","as_bytes","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","default","default","default","default","finish","finish","finish","finish128","finish128","finish128","finish128","fmt","fmt","fmt","fmt","from","from","from","from","h1","h2","into","into","into","into","keys","keys","keys","new","new","new","new_with_keys","new_with_keys","new_with_keys","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write","write","write"],"q":["siphasher","","siphasher::sip","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","siphasher::sip128","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An implementation of SipHash.","An implementation of SipHash with a 128-bit output.","An implementation of SipHash 2-4.","An implementation of SipHash 1-3.","An implementation of SipHash 2-4.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the keys used by this hasher","Get the keys used by this hasher","Get the keys used by this hasher","Creates a new <code>SipHasher13</code> with the two initial keys set to …","Creates a new <code>SipHasher24</code> with the two initial keys set to …","Creates a new <code>SipHasher</code> with the two initial keys set to 0.","Creates a <code>SipHasher13</code> that is keyed off the provided keys.","Creates a <code>SipHasher24</code> that is keyed off the provided keys.","Creates a <code>SipHasher</code> that is keyed off the provided keys.","","","","","","","","","","","","","A 128-bit (2x64) hash output","","An implementation of SipHash128 2-4.","An implementation of SipHash128 1-3.","An implementation of SipHash128 2-4.","Convert into a 16-bytes vector","","","","","","","","","","","","","","","","","","","","Return a 128-bit hash","Return a 128-bit hash","Return a 128-bit hash","Return a 128-bit hash","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the keys used by this hasher","Get the keys used by this hasher","Get the keys used by this hasher","Creates a new <code>SipHasher13</code> with the two initial keys set to …","Creates a new <code>SipHasher24</code> with the two initial keys set to …","Creates a new <code>SipHasher</code> with the two initial keys set to 0.","Creates a <code>SipHasher13</code> that is keyed off the provided keys.","Creates a <code>SipHasher24</code> that is keyed off the provided keys.","Creates a <code>SipHasher</code> that is keyed off the provided keys.","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,0,0,0,0,0,4,4,5,6,7,4,5,6,7,4,5,6,7,4,5,6,7,5,6,7,8,5,6,7,4,5,6,7,4,5,6,7,4,4,4,5,6,7,5,6,7,5,6,7,5,6,7,4,5,6,7,4,5,6,7,4,5,6,7,5,6,7],"f":[null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["siphasher13",3]],[[["",0]],["siphasher24",3]],[[["",0]],["siphasher",3]],[[],["siphasher13",3]],[[],["siphasher24",3]],[[],["siphasher",3]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["siphasher13",3]],[[],["siphasher24",3]],[[],["siphasher",3]],[[["u64",0],["u64",0]],["siphasher13",3]],[[["u64",0],["u64",0]],["siphasher24",3]],[[["u64",0],["u64",0]],["siphasher",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]]],[[["",0]]],[[["",0]]],null,null,null,null,null,[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["hash128",3]],[[["",0]],["siphasher13",3]],[[["",0]],["siphasher24",3]],[[["",0]],["siphasher",3]],[[],["hash128",3]],[[],["siphasher13",3]],[[],["siphasher24",3]],[[],["siphasher",3]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[["",0]],["hash128",3]],[[["",0]],["hash128",3]],[[["",0]],["hash128",3]],[[["",0]],["hash128",3]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["siphasher13",3]],[[],["siphasher24",3]],[[],["siphasher",3]],[[["u64",0],["u64",0]],["siphasher13",3]],[[["u64",0],["u64",0]],["siphasher24",3]],[[["u64",0],["u64",0]],["siphasher",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]]],[[["",0]]],[[["",0]]]],"p":[[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[3,"Hash128"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[8,"Hasher128"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};